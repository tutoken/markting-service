package com.monitor.abi;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class TUSDController extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5061002333640100000000610028810204565b61005d565b604080517f747275655553442e70726f78792e6f776e6572000000000000000000000000008152905190819003601301902055565b6105c78061006c6000396000f3006080604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a281146101085780630add8140146101395780633659cfe61461014e5780635c60da1b146101715780639965b3d614610186578063f1739cae1461019b575b60006100816101bc565b9050600160a060020a03811615156100e3576040805160e560020a62461bcd02815260206004820152601f60248201527f696d706c656d656e746174696f6e20636f6e7472616374206e6f742073657400604482015290519081900360640190fd5b60405136600082376000803683855af43d806000843e818015610104578184f35b8184fd5b34801561011457600080fd5b5061011d6101f2565b60408051600160a060020a039092168252519081900360200190f35b34801561014557600080fd5b5061011d610228565b34801561015a57600080fd5b5061016f600160a060020a036004351661025e565b005b34801561017d57600080fd5b5061011d6101bc565b34801561019257600080fd5b5061016f6102dc565b3480156101a757600080fd5b5061016f600160a060020a03600435166103b8565b604080517f747275655553442e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c0190205490565b604080517f747275655553442e70726f78792e6f776e657200000000000000000000000000815290519081900360130190205490565b604080517f747275655553442e70656e64696e672e70726f78792e6f776e657200000000008152905190819003601b0190205490565b6102666101f2565b600160a060020a031633600160a060020a03161415156102d0576040805160e560020a62461bcd02815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b6102d981610496565b50565b6102e4610228565b600160a060020a031633600160a060020a031614151561034e576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c792070656e64696e672050726f7879204f776e65720000000000000000604482015290519081900360640190fd5b610356610228565b600160a060020a03166103676101f2565b600160a060020a03167f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd960405160405180910390a36103ac6103a7610228565b6104fc565b6103b66000610531565b565b6103c06101f2565b600160a060020a031633600160a060020a031614151561042a576040805160e560020a62461bcd02815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561043f57600080fd5b61044881610531565b7fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b6104716101f2565b60408051600160a060020a03928316815291841660208301528051918290030190a150565b60006104a06101bc565b9050600160a060020a0380821690831614156104bb57600080fd5b6104c482610566565b604051600160a060020a038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050565b604080517f747275655553442e70726f78792e6f776e6572000000000000000000000000008152905190819003601301902055565b604080517f747275655553442e70656e64696e672e70726f78792e6f776e657200000000008152905190819003601b01902055565b604080517f747275655553442e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c019020555600a165627a7a7230582066d4b5932adad66dd7b19bdf5b36c25e9e99e563f06c779eeef9427bb3c9c7670029608060405234801561001057600080fd5b50613804806100206000396000f3fe608060405234801561001057600080fd5b50600436106103c55760003560e01c80637ef7ce92116101ff578063cd0f7a451161011a578063ed62b4d6116100ad578063f3e2aa831161007c578063f3e2aa831461090a578063f966f19114610912578063fc0c546a1461091a578063fc46221d14610922576103c5565b8063ed62b4d6146108cc578063f11db77f146108d4578063f2fde38b146108dc578063f3a2796314610902576103c5565b8063e30c3978116100e9578063e30c39781461084b578063e4e2bfe414610853578063e653aab514610870578063ec38e85514610878576103c5565b8063cd0f7a451461080d578063d0d2d11014610833578063dc9da8cb1461083b578063df66b8f814610843576103c5565b8063a22cba6e11610192578063ab15f72311610161578063ab15f723146107ed578063c0854e06146107f5578063c37e2155146107fd578063cc7e492e14610805576103c5565b8063a22cba6e1461077c578063a415965c14610799578063a6aa4379146107a1578063a91ee0dc146107c7576103c5565b806389d9b059116101ce57806389d9b059146107295780638da5cb5b146107315780638e3af93f146107395780639a6a30a414610756576103c5565b80637ef7ce92146106a857806380749656146106c557806387fb79be146106f357806388ee39cc146106fb576103c5565b806331bac434116102ef57806369ebf34e11610282578063789083e611610251578063789083e61461066a57806379ca5d4c146106725780637b103999146106985780637e4831d3146106a0576103c5565b806369ebf34e146105f05780636c38d4e4146105f857806372df02a71461061557806376f2a59a1461063e576103c5565b80634fe5d431116102be5780634fe5d4311461057b57806351447244146105a157806352006050146105c55780635e5ae1fe146105e8576103c5565b806331bac4341461052557806334437b16146105425780633cb5bc741461054a5780634e71e0c814610573576103c5565b80631e38cdb2116103675780632c9ebb5d116103365780632c9ebb5d146104e15780632e70bd4f146104e95780633134fe9c146104f157806331a02bce146104f9576103c5565b80631e38cdb21461048857806329dea3a1146104ae5780632bbdb18a146104b65780632c349627146104d9576103c5565b8063158ef93e116103a3578063158ef93e1461043e57806315d338381461045a5780631d42953a146104625780631d4e135b1461046a576103c5565b80630e536ff4146103ca578063144fa6d7146103fe5780631461cfce14610424575b600080fd5b6103fc600480360360608110156103e057600080fd5b508035906001600160a01b03602082013516906040013561092a565b005b6103fc6004803603602081101561041457600080fd5b50356001600160a01b0316610d6d565b61042c610e38565b60408051918252519081900360200190f35b610446610e5c565b604080519115158252519081900360200190f35b61042c610e7d565b61042c610ea1565b610472610ec5565b6040805160ff9092168252519081900360200190f35b6103fc6004803603602081101561049e57600080fd5b50356001600160a01b0316610eca565b61042c610fab565b610446600480360360408110156104cc57600080fd5b5080359060200135610fb1565b6103fc61102a565b61042c61112b565b61042c611131565b61042c611137565b6103fc6004803603604081101561050f57600080fd5b506001600160a01b03813516906020013561113d565b6103fc6004803603602081101561053b57600080fd5b50356113dc565b61042c6114cb565b6103fc6004803603606081101561056057600080fd5b50803590602081013590604001356114d1565b6103fc6115d0565b6103fc6004803603602081101561059157600080fd5b50356001600160a01b0316611663565b6105a9611729565b604080516001600160a01b039092168252519081900360200190f35b6103fc600480360360408110156105db57600080fd5b5080359060200135611738565b6103fc611820565b6105a9611885565b6103fc6004803603602081101561060e57600080fd5b5035611894565b6103fc6004803603606081101561062b57600080fd5b5080359060208101359060400135611a41565b6103fc6004803603604081101561065457600080fd5b506001600160a01b038135169060200135611b0d565b61042c611d55565b6103fc6004803603602081101561068857600080fd5b50356001600160a01b0316611d5b565b6105a9611e2a565b610446611e39565b6103fc600480360360208110156106be57600080fd5b5035611e42565b6103fc600480360360408110156106db57600080fd5b506001600160a01b0381351690602001351515611f73565b61042c6120fe565b6103fc6004803603604081101561071157600080fd5b506001600160a01b0381358116916020013516612104565b6103fc61228b565b6105a961251d565b6103fc6004803603602081101561074f57600080fd5b503561252c565b6103fc6004803603602081101561076c57600080fd5b50356001600160a01b0316612786565b6105a96004803603602081101561079257600080fd5b503561281e565b6103fc61283b565b6103fc600480360360208110156107b757600080fd5b50356001600160a01b03166128cb565b6103fc600480360360208110156107dd57600080fd5b50356001600160a01b0316612acb565b6103fc612b92565b61042c612d10565b61042c612d34565b6103fc612d3a565b6103fc6004803603602081101561082357600080fd5b50356001600160a01b0316612eb3565b61042c612fe1565b6103fc612fe7565b6105a9613096565b6105a96130a5565b6104466004803603602081101561086957600080fd5b50356130b4565b61042c613241565b6108956004803603602081101561088e57600080fd5b5035613247565b604080516001600160a01b039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b610472613292565b6105a9613297565b6103fc600480360360208110156108f257600080fd5b50356001600160a01b03166132af565b6103fc61337c565b6103fc613439565b61042c613500565b6105a9613524565b61042c613533565b6000546001600160a01b0316331461099457600d5460ff1615610994576040805162461bcd60e51b815260206004820152601160248201527f6d696e74696e6720697320706175736564000000000000000000000000000000604482015290519081900360640190fd5b601254604080517f7338c25c0000000000000000000000000000000000000000000000000000000081523360048201527f6973545553444d696e7452617469666965720000000000000000000000000000602482015290516001600160a01b0390921691637338c25c91604480820192602092909190829003018186803b158015610a1e57600080fd5b505afa158015610a32573d6000803e3d6000fd5b505050506040513d6020811015610a4857600080fd5b505180610a5f57506000546001600160a01b031633145b610ab0576040805162461bcd60e51b815260206004820152601960248201527f6d757374206265207261746966696572206f72206f776e657200000000000000604482015290519081900360640190fd5b610ab8613768565b60108481548110610ac557fe5b60009182526020918290206040805160a081018252600690930290910180546001600160a01b03908116808552600183015495850195909552600282015492840192909252600381015460608401526004015460ff1615156080830152909250841614610b79576040805162461bcd60e51b815260206004820152601960248201527f746f206164647265737320646f6573206e6f74206d6174636800000000000000604482015290519081900360640190fd5b81816020015114610bd1576040805162461bcd60e51b815260206004820152601560248201527f616d6f756e7420646f6573206e6f74206d617463680000000000000000000000604482015290519081900360640190fd5b60108481548110610bde57fe5b600091825260208083203384526005600690930201919091019052604090205460ff1615610c53576040805162461bcd60e51b815260206004820152601060248201527f616c726561647920617070726f76656400000000000000000000000000000000604482015290519081900360640190fd5b600160108581548110610c6257fe5b6000918252602080832033845260069290920290910160050190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905560108054610ce39160019187908110610cc357fe5b90600052602060002090600602016003015461353990919063ffffffff16565b60108581548110610cf057fe5b60009182526020822060036006909202010191909155604051339186917f86cc1a29a55449d1229bb301da3d61fcd5490843635df9a79e5a4df4724773d29190a3610d5960108581548110610d4157fe5b90600052602060002090600602016003015483610fb1565b15610d6757610d678461252c565b50505050565b6000546001600160a01b03163314610dcc576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b601180546001600160a01b0383167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517fefc1fd16ea80a922086ee4e995739d59b025c1bcea6d1f67855747480c83214b9181900360200190a150565b7f6973476173526566756e6465720000000000000000000000000000000000000081565b60015474010000000000000000000000000000000000000000900460ff1681565b7f6973545553444d696e745061757365727300000000000000000000000000000081565b7f6973545553444d696e745261746966696572000000000000000000000000000081565b600181565b6000546001600160a01b03163314610f29576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b601154604080517ff1739cae0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151919092169163f1739cae91602480830192600092919082900301818387803b158015610f9057600080fd5b505af1158015610fa4573d6000803e3d6000fd5b5050505050565b60035481565b60006009548211158015610fc757506003548211155b15610fdc5760018310610fdc57506001611024565b600a548211158015610ff057506004548211155b15611005576003831061100557506001611024565b6000546001600160a01b031633141561102057506001611024565b5060005b92915050565b6013546001600160a01b031633148061104d57506000546001600160a01b031633145b61109e576040805162461bcd60e51b815260206004820152601760248201527f6d75737420626520706175736572206f72206f776e6572000000000000000000604482015290519081900360640190fd5b601154604080517f3659cfe6000000000000000000000000000000000000000000000000000000008152733c8984dce8f68fcdeeeafd9e0eca3598562ed291600482015290516001600160a01b0390921691633659cfe69160248082019260009290919082900301818387803b15801561111757600080fd5b505af1158015610d67573d6000803e3d6000fd5b60045481565b60105490565b60095481565b6000546001600160a01b031633146111a757600d5460ff16156111a7576040805162461bcd60e51b815260206004820152601160248201527f6d696e74696e6720697320706175736564000000000000000000000000000000604482015290519081900360640190fd5b600f546001600160a01b03163314806111ca57506000546001600160a01b031633145b61121b576040805162461bcd60e51b815260206004820152601860248201527f6d757374206265206d696e744b6579206f72206f776e65720000000000000000604482015290519081900360640190fd5b611223613768565b506040805160a0810182526001600160a01b038416808252602080830185905243838501526000606084018190526080840152601054845190815233918101919091528351929385937f883eab2a74c029007e37f3f118fa7713d39b756c0b7c932a0269fcb995a4724c9281900390910190a36010805460018101825560009190915281517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672600690920291820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905560208201517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67382015560408201517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67482015560608201517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6758201556080909101517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67690910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790555050565b6000546001600160a01b0316331461143b576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006010828154811061144a57fe5b6000918252602080832060069290920290910160040180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001693151593909317909255604080518481529283019190915280517fbe7295ef37ca984ec35808d259aa03f272c2d747c6ce6a47b6e90862afccc5769281900390910190a150565b60075481565b6000546001600160a01b03163314611530576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b8183111580156115405750808211155b61154957600080fd5b600583905560085483101561155f576005546008555b6006829055600954821015611575576006546009555b6007819055600a5481101561158b57600754600a555b604080518481526020810184905280820183905290517fa88ec94782bac5c3e5f7d8e8f27b39f3f9d53da3fc2824db137086185cf2117d9181900360600190a1505050565b6001546001600160a01b031633146115e757600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b03841617909155169055565b6000546001600160a01b031633146116c2576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b601154604080517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291519190921691633659cfe691602480830192600092919082900301818387803b158015610f9057600080fd5b6014546001600160a01b031681565b6000546001600160a01b03163314611797576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b601154604080517f52006050000000000000000000000000000000000000000000000000000000008152600481018590526024810184905290516001600160a01b039092169163520060509160448082019260009290919082900301818387803b15801561180457600080fd5b505af1158015611818573d6000803e3d6000fd5b505050505050565b6000546001600160a01b0316331461187f576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b43600e55565b600f546001600160a01b031681565b601254604080517f7338c25c0000000000000000000000000000000000000000000000000000000081523360048201527f6973545553444d696e7450617573657273000000000000000000000000000000602482015290516001600160a01b0390921691637338c25c91604480820192602092909190829003018186803b15801561191e57600080fd5b505afa158015611932573d6000803e3d6000fd5b505050506040513d602081101561194857600080fd5b50518061195f57506000546001600160a01b031633145b6119b0576040805162461bcd60e51b815260206004820152601760248201527f6d75737420626520706175736572206f72206f776e6572000000000000000000604482015290519081900360640190fd5b6001601082815481106119bf57fe5b60009182526020918290206006919091020160040180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091556040805183815260019281019290925280517fbe7295ef37ca984ec35808d259aa03f272c2d747c6ce6a47b6e90862afccc5769281900390910190a150565b6000546001600160a01b03163314611aa0576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b818311158015611ab05750808211155b611ab957600080fd5b600283905560038290556004819055604080518481526020810184905280820183905290517fba6a9f8d54021af0fab65e388ad81cc3dfb17207bed50a5e9a30f7adabb534d19181900360600190a1505050565b6000546001600160a01b03163314611b7757600d5460ff1615611b77576040805162461bcd60e51b815260206004820152601160248201527f6d696e74696e6720697320706175736564000000000000000000000000000000604482015290519081900360640190fd5b600f546001600160a01b0316331480611b9a57506000546001600160a01b031633145b611beb576040805162461bcd60e51b815260206004820152601860248201527f6d757374206265206d696e744b6579206f72206f776e65720000000000000000604482015290519081900360640190fd5b600254811115611c42576040805162461bcd60e51b815260206004820152601f60248201527f6f7665722074686520696e7374616e74206d696e74207468726573686f6c6400604482015290519081900360640190fd5b600854811115611c99576040805162461bcd60e51b815260206004820152601860248201527f696e7374616e74206d696e7420706f6f6c206973206472790000000000000000604482015290519081900360640190fd5b600854611cac908263ffffffff61359a16565b600855604051339082906001600160a01b038516907fec755a4feb8086d62e216ca919461349221df54bf9ca83300b7a2bf8e5807dfc90600090a4601154604080517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b15801561180457600080fd5b60025481565b6000546001600160a01b03163314611dba576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b60115460008054604080517f88ee39cc0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529283166024820152905191909316926388ee39cc92604480830193919282900301818387803b158015610f9057600080fd5b6012546001600160a01b031681565b600d5460ff1681565b600f546001600160a01b0316331480611e6557506000546001600160a01b031633145b611eb6576040805162461bcd60e51b815260206004820152601860248201527f6d757374206265206d696e744b6579206f72206f776e65720000000000000000604482015290519081900360640190fd5b60108181548110611ec357fe5b60009182526020808320600690920290910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560018101839055600281018390556003810192909255600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040805183815290517fccec691f17b1a3d2b56ac2c39074c2930ba803fc46191a49259706621eac3f8f929181900390910190a150565b601254604080517f7338c25c0000000000000000000000000000000000000000000000000000000081523360048201527f6973526567697374727941646d696e0000000000000000000000000000000000602482015290516001600160a01b0390921691637338c25c91604480820192602092909190829003018186803b158015611ffd57600080fd5b505afa158015612011573d6000803e3d6000fd5b505050506040513d602081101561202757600080fd5b50518061203e57506000546001600160a01b031633145b61208f576040805162461bcd60e51b815260206004820152601f60248201527f6d7573742062652072656769737472792061646d696e206f72206f776e657200604482015290519081900360640190fd5b601154604080517f807496560000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152841515602483015291519190921691638074965691604480830192600092919082900301818387803b15801561180457600080fd5b60085481565b6000546001600160a01b03163314612163576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000916001600160a01b038516916370a0823191602480820192602092909190829003018186803b1580156121c657600080fd5b505afa1580156121da573d6000803e3d6000fd5b505050506040513d60208110156121f057600080fd5b5051604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820184905291519293509085169163a9059cbb916044808201926020929091908290030181600087803b15801561226157600080fd5b505af1158015612275573d6000803e3d6000fd5b505050506040513d6020811015610fa457600080fd5b601254604080517f7338c25c0000000000000000000000000000000000000000000000000000000081523360048201527f6973545553444d696e7452617469666965720000000000000000000000000000602482015290516001600160a01b0390921691637338c25c91604480820192602092909190829003018186803b15801561231557600080fd5b505afa158015612329573d6000803e3d6000fd5b505050506040513d602081101561233f57600080fd5b50518061235657506000546001600160a01b031633145b6123a7576040805162461bcd60e51b815260206004820152601960248201527f6d757374206265207261746966696572206f72206f776e657200000000000000604482015290519081900360640190fd5b6000546001600160a01b031633146124b3576123c16137a2565b604080518082019182905290600b9060029082845b81546001600160a01b031681526001909101906020018083116123d657505050505090508060006002811061240757fe5b60200201516001600160a01b0316336001600160a01b03161415801561243a575060208101516001600160a01b03163314155b61244357600080fd5b80516001600160a01b03166124955733600b60005b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790555061251b565b60208101516001600160a01b03166124b15733600b6001612458565b505b6124bf600b60006137c0565b6124e86124d960095460065461359a90919063ffffffff16565b600a549063ffffffff61359a16565b600a556006546009556040517f102a997ac4d17915071d5422bc77b9e807c57305cefef394daf2468abacb26c290600090a15b565b6000546001600160a01b031681565b6000546001600160a01b0316331461259657600d5460ff1615612596576040805162461bcd60e51b815260206004820152601160248201527f6d696e74696e6720697320706175736564000000000000000000000000000000604482015290519081900360640190fd5b61259e613768565b601082815481106125ab57fe5b600091825260208083206040805160a081018252600690940290910180546001600160a01b0390811680865260018301549486018590526002830154938601939093526003820154606086015260049091015460ff161515608085015293549294509290913391161461263357612621846130b4565b61262a57600080fd5b612633816135dc565b6010848154811061264057fe5b60009182526020822060069091020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600181018290556002810182905560038101829055600490810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055601154604080517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038781169482019490945260248101869052905191909216926340c10f19926044808201939182900301818387803b15801561272157600080fd5b505af1158015612735573d6000803e3d6000fd5b50506040805187815233602082015281518594506001600160a01b03871693507f9a0dcee498442c144388e9d1dd09acdf74ffc3bce9cb52841186c1d8ac032154929181900390910190a350505050565b6000546001600160a01b031633146127e5576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040516001600160a01b038216904780156108fc02916000818181858888f1935050505015801561281a573d6000803e3d6000fd5b5050565b600b816002811061282b57fe5b01546001600160a01b0316905081565b6000546001600160a01b0316331461289a576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b600754600a556040517ff887efb579b3283f395871614f44a2fd3021ddf59e72a91195f5da936ebaa06d90600090a1565b601254604080517f7338c25c0000000000000000000000000000000000000000000000000000000081523360048201527f6973476173526566756e64657200000000000000000000000000000000000000602482015290516001600160a01b0390921691637338c25c91604480820192602092909190829003018186803b15801561295557600080fd5b505afa158015612969573d6000803e3d6000fd5b505050506040513d602081101561297f57600080fd5b50518061299657506000546001600160a01b031633145b6129e7576040805162461bcd60e51b815260206004820152601d60248201527f6d7573742062652067617320726566756e646572206f72206f776e6572000000604482015290519081900360640190fd5b60005a9050816001600160a01b0316637f5a7c7b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612a2757600080fd5b505af1158015612a3b573d6000803e3d6000fd5b505050506000612a525a839063ffffffff61359a16565b6011549091506001600160a01b03166317c931bd612a78836161a863ffffffff61362a16565b6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015612aae57600080fd5b505af1158015612ac2573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b03163314612b2a576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b601280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383811691909117918290556040519116907f278c70ced5f3e0e5eeb385b5ff9cb735748ba00a625147e66065ed48fc1562cd90600090a250565b601254604080517f7338c25c0000000000000000000000000000000000000000000000000000000081523360048201527f6973545553444d696e7450617573657273000000000000000000000000000000602482015290516001600160a01b0390921691637338c25c91604480820192602092909190829003018186803b158015612c1c57600080fd5b505afa158015612c30573d6000803e3d6000fd5b505050506040513d6020811015612c4657600080fd5b505180612c5d57506000546001600160a01b031633145b612cae576040805162461bcd60e51b815260206004820152601760248201527f6d75737420626520706175736572206f72206f776e6572000000000000000000604482015290519081900360640190fd5b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915560408051918252517f6cb4a816be468261438a85abae2d59de6bc19b06d3a76e2f3acfd656d85a2ee99181900360200190a1565b7f6973526567697374727941646d696e000000000000000000000000000000000081565b600a5481565b601254604080517f7338c25c0000000000000000000000000000000000000000000000000000000081523360048201527f6973545553444d696e7452617469666965720000000000000000000000000000602482015290516001600160a01b0390921691637338c25c91604480820192602092909190829003018186803b158015612dc457600080fd5b505afa158015612dd8573d6000803e3d6000fd5b505050506040513d6020811015612dee57600080fd5b505180612e0557506000546001600160a01b031633145b612e56576040805162461bcd60e51b815260206004820152601960248201527f6d757374206265207261746966696572206f72206f776e657200000000000000604482015290519081900360640190fd5b612e7f612e7060085460055461359a90919063ffffffff16565b6009549063ffffffff61359a16565b6009556005546008556040517ffebce9a3dbc55fe4e42cabd1229670f5e1ed4cbf008685f75392a050ab9561fd90600090a1565b6000546001600160a01b03163314612f12576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116612f6d576040805162461bcd60e51b815260206004820152601a60248201527f6e6577206d696e74206b65792063616e6e6f7420626520307830000000000000604482015290519081900360640190fd5b600f546040516001600160a01b038084169216907ffbd0b5e594e818883d41b4de49805781c984d030597177b02c741cafe04bf21b90600090a3600f80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600e5481565b6000546001600160a01b03163314613046576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b601160009054906101000a90046001600160a01b03166001600160a01b0316639965b3d66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561111757600080fd5b6013546001600160a01b031681565b6001546001600160a01b031681565b60006130be613768565b601083815481106130cb57fe5b60009182526020918290206040805160a081018252600690930290910180546001600160a01b0316835260018101549383019390935260028301549082018190526003830154606083015260049092015460ff1615156080820152600e549092501061317e576040805162461bcd60e51b815260206004820152601460248201527f74686973206d696e7420697320696e76616c6964000000000000000000000000604482015290519081900360640190fd5b8060800151156131d5576040805162461bcd60e51b815260206004820152601360248201527f74686973206d696e742069732070617573656400000000000000000000000000604482015290519081900360640190fd5b6131e781606001518260200151610fb1565b613238576040805162461bcd60e51b815260206004820152601460248201527f6e6f7420656e6f75676820617070726f76616c73000000000000000000000000604482015290519081900360640190fd5b50600192915050565b60065481565b6010818154811061325457fe5b6000918252602090912060069091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b600381565b733c8984dce8f68fcdeeeafd9e0eca3598562ed29181565b6000546001600160a01b0316331461330e576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03838116919091179182905560008054604051938316939216917fec070b46448fede8b4a9a9f8d7919141b5e1c729397eccb0c59af2d6d9fc2d6c9190a350565b6000546001600160a01b031633146133db576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055604080516000815290517f6cb4a816be468261438a85abae2d59de6bc19b06d3a76e2f3acfd656d85a2ee99181900360200190a1565b6000546001600160a01b03163314613498576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b60115460008054604080517f9a6a30a40000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290519190931692639a6a30a492602480830193919282900301818387803b15801561111757600080fd5b7f697354555344526564656d7074696f6e41646d696e000000000000000000000081565b6011546001600160a01b031681565b60055481565b600082820183811015613593576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600061359383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061366c565b60095481111580156135f057506003548111155b1561361057600954613608908263ffffffff61359a16565b600955613627565b600a54613623908263ffffffff61359a16565b600a555b50565b600061359383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613703565b600081848411156136fb5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156136c05781810151838201526020016136a8565b50505050905090810190601f1680156136ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836137525760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156136c05781810151838201526020016136a8565b50600083858161375e57fe5b0495945050505050565b6040518060a0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000151581525090565b60405180604001604052806002906020820280368337509192915050565b50600081556001016000905556fea26469706673582212205debff33e0add232e489ae7bdb7cbbc58874185c3f80213300d0c282f68459e364736f6c634300060a0033\n";

    public static final String FUNC_PROXYOWNER = "proxyOwner";

    public static final String FUNC_PENDINGPROXYOWNER = "pendingProxyOwner";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_IMPLEMENTATION = "implementation";

    public static final String FUNC_CLAIMPROXYOWNERSHIP = "claimProxyOwnership";

    public static final String FUNC_TRANSFERPROXYOWNERSHIP = "transferProxyOwnership";

    public static final String FUNC_IS_GAS_REFUNDER = "IS_GAS_REFUNDER";

    public static final String FUNC_IS_MINT_PAUSER = "IS_MINT_PAUSER";

    public static final String FUNC_IS_MINT_RATIFIER = "IS_MINT_RATIFIER";

    public static final String FUNC_IS_REDEMPTION_ADMIN = "IS_REDEMPTION_ADMIN";

    public static final String FUNC_IS_REGISTRY_ADMIN = "IS_REGISTRY_ADMIN";

    public static final String FUNC_MULTISIG_MINT_SIGS = "MULTISIG_MINT_SIGS";

    public static final String FUNC_PAUSED_IMPLEMENTATION = "PAUSED_IMPLEMENTATION";

    public static final String FUNC_RATIFY_MINT_SIGS = "RATIFY_MINT_SIGS";

    public static final String FUNC_CANFINALIZE = "canFinalize";

    public static final String FUNC_CLAIMOWNERSHIP = "claimOwnership";

    public static final String FUNC_CLAIMTRUECURRENCYPROXYOWNERSHIP = "claimTrueCurrencyProxyOwnership";

    public static final String FUNC_FASTPAUSE = "fastPause";

    public static final String FUNC_FINALIZEMINT = "finalizeMint";

    public static final String FUNC_HASENOUGHAPPROVAL = "hasEnoughApproval";

    public static final String FUNC_INITIALIZED = "initialized";

    public static final String FUNC_INSTANTMINT = "instantMint";

    public static final String FUNC_INSTANTMINTLIMIT = "instantMintLimit";

    public static final String FUNC_INSTANTMINTPOOL = "instantMintPool";

    public static final String FUNC_INSTANTMINTTHRESHOLD = "instantMintThreshold";

    public static final String FUNC_INVALIDATEALLPENDINGMINTS = "invalidateAllPendingMints";

    public static final String FUNC_MINTKEY = "mintKey";

    public static final String FUNC_MINTOPERATIONCOUNT = "mintOperationCount";

    public static final String FUNC_MINTOPERATIONS = "mintOperations";

    public static final String FUNC_MINTPAUSED = "mintPaused";

    public static final String FUNC_MINTREQINVALIDBEFORETHISBLOCK = "mintReqInvalidBeforeThisBlock";

    public static final String FUNC_MULTISIGMINTLIMIT = "multiSigMintLimit";

    public static final String FUNC_MULTISIGMINTPOOL = "multiSigMintPool";

    public static final String FUNC_MULTISIGMINTTHRESHOLD = "multiSigMintThreshold";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSEMINT = "pauseMint";

    public static final String FUNC_PAUSEMINTS = "pauseMints";

    public static final String FUNC_PAUSETOKEN = "pauseToken";

    public static final String FUNC_PENDINGOWNER = "pendingOwner";

    public static final String FUNC_RATIFIEDMINTLIMIT = "ratifiedMintLimit";

    public static final String FUNC_RATIFIEDMINTPOOL = "ratifiedMintPool";

    public static final String FUNC_RATIFIEDMINTTHRESHOLD = "ratifiedMintThreshold";

    public static final String FUNC_RATIFIEDPOOLREFILLAPPROVALS = "ratifiedPoolRefillApprovals";

    public static final String FUNC_RATIFYMINT = "ratifyMint";

    public static final String FUNC_RECLAIMETHER = "reclaimEther";

    public static final String FUNC_RECLAIMTOKEN = "reclaimToken";

    public static final String FUNC_REFILLINSTANTMINTPOOL = "refillInstantMintPool";

    public static final String FUNC_REFILLMULTISIGMINTPOOL = "refillMultiSigMintPool";

    public static final String FUNC_REFILLRATIFIEDMINTPOOL = "refillRatifiedMintPool";

    public static final String FUNC_REFUNDGASWITHHOOK = "refundGasWithHook";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_REQUESTMINT = "requestMint";

    public static final String FUNC_REQUESTRECLAIMETHER = "requestReclaimEther";

    public static final String FUNC_REQUESTRECLAIMTOKEN = "requestReclaimToken";

    public static final String FUNC_REVOKEMINT = "revokeMint";

    public static final String FUNC_SETBURNBOUNDS = "setBurnBounds";

    public static final String FUNC_SETCANBURN = "setCanBurn";

    public static final String FUNC_SETMINTLIMITS = "setMintLimits";

    public static final String FUNC_SETMINTTHRESHOLDS = "setMintThresholds";

    public static final String FUNC_SETREGISTRY = "setRegistry";

    public static final String FUNC_SETTOKEN = "setToken";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_TRANSFERMINTKEY = "transferMintKey";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERTRUECURRENCYPROXYOWNERSHIP = "transferTrueCurrencyProxyOwnership";

    public static final String FUNC_TRUEREWARDMANAGER = "trueRewardManager";

    public static final String FUNC_UNPAUSEMINT = "unpauseMint";

    public static final String FUNC_UNPAUSEMINTS = "unpauseMints";

    public static final String FUNC_UPGRADETRUECURRENCYPROXYIMPLTO = "upgradeTrueCurrencyProxyImplTo";

    public static final Event PROXYOWNERSHIPTRANSFERRED_EVENT = new Event("ProxyOwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event NEWPENDINGOWNER_EVENT = new Event("NewPendingOwner",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    public static final Event ALLMINTSPAUSED_EVENT = new Event("AllMintsPaused",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
            }));
    ;

    public static final Event FASTPAUSESET_EVENT = new Event("FastPauseSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }));
    ;

    public static final Event FINALIZEMINT_EVENT = new Event("FinalizeMint",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Address>() {
            }));
    ;

    public static final Event INSTANTMINT_EVENT = new Event("InstantMint",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event INSTANTPOOLREFILLED_EVENT = new Event("InstantPoolRefilled",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event MINTAPPROVED_EVENT = new Event("MintApproved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event MINTLIMITSCHANGED_EVENT = new Event("MintLimitsChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event MINTPAUSED_EVENT = new Event("MintPaused",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event MINTRATIFIED_EVENT = new Event("MintRatified",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event MINTTHRESHOLDCHANGED_EVENT = new Event("MintThresholdChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event MULTISIGPOOLREFILLED_EVENT = new Event("MultiSigPoolRefilled",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event NEWOWNERPENDING_EVENT = new Event("NewOwnerPending",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event RATIFYPOOLREFILLED_EVENT = new Event("RatifyPoolRefilled",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event REQUESTMINT_EVENT = new Event("RequestMint",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Address>() {
            }));
    ;

    public static final Event REQUESTRECLAIMCONTRACT_EVENT = new Event("RequestReclaimContract",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    public static final Event REVOKEMINT_EVENT = new Event("RevokeMint",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
            }));
    ;

    public static final Event SETREGISTRY_EVENT = new Event("SetRegistry",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    public static final Event SETTOKEN_EVENT = new Event("SetToken",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }));
    ;

    public static final Event TRANSFERMINTKEY_EVENT = new Event("TransferMintKey",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    @Deprecated
    protected TUSDController(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TUSDController(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TUSDController(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TUSDController(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> proxyOwner() {
        final Function function = new Function(FUNC_PROXYOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> pendingProxyOwner() {
        final Function function = new Function(FUNC_PENDINGPROXYOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String implementation) {
        final Function function = new Function(
                FUNC_UPGRADETO,
                Arrays.<Type>asList(new Address(160, implementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> implementation() {
        final Function function = new Function(FUNC_IMPLEMENTATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> claimProxyOwnership() {
        final Function function = new Function(
                FUNC_CLAIMPROXYOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferProxyOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFERPROXYOWNERSHIP,
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<ProxyOwnershipTransferredEventResponse> getProxyOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PROXYOWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<ProxyOwnershipTransferredEventResponse> responses = new ArrayList<ProxyOwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ProxyOwnershipTransferredEventResponse typedResponse = new ProxyOwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProxyOwnershipTransferredEventResponse> proxyOwnershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ProxyOwnershipTransferredEventResponse>() {
            @Override
            public ProxyOwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PROXYOWNERSHIPTRANSFERRED_EVENT, log);
                ProxyOwnershipTransferredEventResponse typedResponse = new ProxyOwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProxyOwnershipTransferredEventResponse> proxyOwnershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROXYOWNERSHIPTRANSFERRED_EVENT));
        return proxyOwnershipTransferredEventFlowable(filter);
    }

    public List<NewPendingOwnerEventResponse> getNewPendingOwnerEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPENDINGOWNER_EVENT, transactionReceipt);
        ArrayList<NewPendingOwnerEventResponse> responses = new ArrayList<NewPendingOwnerEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewPendingOwnerEventResponse typedResponse = new NewPendingOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.currentOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pendingOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewPendingOwnerEventResponse> newPendingOwnerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewPendingOwnerEventResponse>() {
            @Override
            public NewPendingOwnerEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPENDINGOWNER_EVENT, log);
                NewPendingOwnerEventResponse typedResponse = new NewPendingOwnerEventResponse();
                typedResponse.log = log;
                typedResponse.currentOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pendingOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewPendingOwnerEventResponse> newPendingOwnerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPENDINGOWNER_EVENT));
        return newPendingOwnerEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public List<AllMintsPausedEventResponse> getAllMintsPausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ALLMINTSPAUSED_EVENT, transactionReceipt);
        ArrayList<AllMintsPausedEventResponse> responses = new ArrayList<AllMintsPausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AllMintsPausedEventResponse typedResponse = new AllMintsPausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AllMintsPausedEventResponse> allMintsPausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AllMintsPausedEventResponse>() {
            @Override
            public AllMintsPausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ALLMINTSPAUSED_EVENT, log);
                AllMintsPausedEventResponse typedResponse = new AllMintsPausedEventResponse();
                typedResponse.log = log;
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AllMintsPausedEventResponse> allMintsPausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ALLMINTSPAUSED_EVENT));
        return allMintsPausedEventFlowable(filter);
    }

    public List<FastPauseSetEventResponse> getFastPauseSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FASTPAUSESET_EVENT, transactionReceipt);
        ArrayList<FastPauseSetEventResponse> responses = new ArrayList<FastPauseSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FastPauseSetEventResponse typedResponse = new FastPauseSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._newFastPause = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FastPauseSetEventResponse> fastPauseSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FastPauseSetEventResponse>() {
            @Override
            public FastPauseSetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(FASTPAUSESET_EVENT, log);
                FastPauseSetEventResponse typedResponse = new FastPauseSetEventResponse();
                typedResponse.log = log;
                typedResponse._newFastPause = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FastPauseSetEventResponse> fastPauseSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FASTPAUSESET_EVENT));
        return fastPauseSetEventFlowable(filter);
    }

    public List<FinalizeMintEventResponse> getFinalizeMintEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FINALIZEMINT_EVENT, transactionReceipt);
        ArrayList<FinalizeMintEventResponse> responses = new ArrayList<FinalizeMintEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FinalizeMintEventResponse typedResponse = new FinalizeMintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.mintKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FinalizeMintEventResponse> finalizeMintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FinalizeMintEventResponse>() {
            @Override
            public FinalizeMintEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(FINALIZEMINT_EVENT, log);
                FinalizeMintEventResponse typedResponse = new FinalizeMintEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.mintKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FinalizeMintEventResponse> finalizeMintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FINALIZEMINT_EVENT));
        return finalizeMintEventFlowable(filter);
    }

    public List<InstantMintEventResponse> getInstantMintEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSTANTMINT_EVENT, transactionReceipt);
        ArrayList<InstantMintEventResponse> responses = new ArrayList<InstantMintEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InstantMintEventResponse typedResponse = new InstantMintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.mintKey = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InstantMintEventResponse> instantMintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InstantMintEventResponse>() {
            @Override
            public InstantMintEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(INSTANTMINT_EVENT, log);
                InstantMintEventResponse typedResponse = new InstantMintEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.mintKey = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InstantMintEventResponse> instantMintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INSTANTMINT_EVENT));
        return instantMintEventFlowable(filter);
    }

    public List<InstantPoolRefilledEventResponse> getInstantPoolRefilledEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSTANTPOOLREFILLED_EVENT, transactionReceipt);
        ArrayList<InstantPoolRefilledEventResponse> responses = new ArrayList<InstantPoolRefilledEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InstantPoolRefilledEventResponse typedResponse = new InstantPoolRefilledEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InstantPoolRefilledEventResponse> instantPoolRefilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InstantPoolRefilledEventResponse>() {
            @Override
            public InstantPoolRefilledEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(INSTANTPOOLREFILLED_EVENT, log);
                InstantPoolRefilledEventResponse typedResponse = new InstantPoolRefilledEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<InstantPoolRefilledEventResponse> instantPoolRefilledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INSTANTPOOLREFILLED_EVENT));
        return instantPoolRefilledEventFlowable(filter);
    }

    public List<MintApprovedEventResponse> getMintApprovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINTAPPROVED_EVENT, transactionReceipt);
        ArrayList<MintApprovedEventResponse> responses = new ArrayList<MintApprovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MintApprovedEventResponse typedResponse = new MintApprovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.approver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintApprovedEventResponse> mintApprovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MintApprovedEventResponse>() {
            @Override
            public MintApprovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINTAPPROVED_EVENT, log);
                MintApprovedEventResponse typedResponse = new MintApprovedEventResponse();
                typedResponse.log = log;
                typedResponse.approver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintApprovedEventResponse> mintApprovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTAPPROVED_EVENT));
        return mintApprovedEventFlowable(filter);
    }

    public List<MintLimitsChangedEventResponse> getMintLimitsChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINTLIMITSCHANGED_EVENT, transactionReceipt);
        ArrayList<MintLimitsChangedEventResponse> responses = new ArrayList<MintLimitsChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MintLimitsChangedEventResponse typedResponse = new MintLimitsChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.instant = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ratified = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.multiSig = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintLimitsChangedEventResponse> mintLimitsChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MintLimitsChangedEventResponse>() {
            @Override
            public MintLimitsChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINTLIMITSCHANGED_EVENT, log);
                MintLimitsChangedEventResponse typedResponse = new MintLimitsChangedEventResponse();
                typedResponse.log = log;
                typedResponse.instant = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.ratified = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.multiSig = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintLimitsChangedEventResponse> mintLimitsChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTLIMITSCHANGED_EVENT));
        return mintLimitsChangedEventFlowable(filter);
    }

    public List<MintPausedEventResponse> getMintPausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINTPAUSED_EVENT, transactionReceipt);
        ArrayList<MintPausedEventResponse> responses = new ArrayList<MintPausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MintPausedEventResponse typedResponse = new MintPausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintPausedEventResponse> mintPausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MintPausedEventResponse>() {
            @Override
            public MintPausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINTPAUSED_EVENT, log);
                MintPausedEventResponse typedResponse = new MintPausedEventResponse();
                typedResponse.log = log;
                typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintPausedEventResponse> mintPausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTPAUSED_EVENT));
        return mintPausedEventFlowable(filter);
    }

    public List<MintRatifiedEventResponse> getMintRatifiedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINTRATIFIED_EVENT, transactionReceipt);
        ArrayList<MintRatifiedEventResponse> responses = new ArrayList<MintRatifiedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MintRatifiedEventResponse typedResponse = new MintRatifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.opIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ratifier = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintRatifiedEventResponse> mintRatifiedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MintRatifiedEventResponse>() {
            @Override
            public MintRatifiedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINTRATIFIED_EVENT, log);
                MintRatifiedEventResponse typedResponse = new MintRatifiedEventResponse();
                typedResponse.log = log;
                typedResponse.opIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ratifier = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintRatifiedEventResponse> mintRatifiedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTRATIFIED_EVENT));
        return mintRatifiedEventFlowable(filter);
    }

    public List<MintThresholdChangedEventResponse> getMintThresholdChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINTTHRESHOLDCHANGED_EVENT, transactionReceipt);
        ArrayList<MintThresholdChangedEventResponse> responses = new ArrayList<MintThresholdChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MintThresholdChangedEventResponse typedResponse = new MintThresholdChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.instant = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ratified = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.multiSig = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintThresholdChangedEventResponse> mintThresholdChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MintThresholdChangedEventResponse>() {
            @Override
            public MintThresholdChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINTTHRESHOLDCHANGED_EVENT, log);
                MintThresholdChangedEventResponse typedResponse = new MintThresholdChangedEventResponse();
                typedResponse.log = log;
                typedResponse.instant = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.ratified = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.multiSig = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintThresholdChangedEventResponse> mintThresholdChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTTHRESHOLDCHANGED_EVENT));
        return mintThresholdChangedEventFlowable(filter);
    }

    public List<MultiSigPoolRefilledEventResponse> getMultiSigPoolRefilledEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MULTISIGPOOLREFILLED_EVENT, transactionReceipt);
        ArrayList<MultiSigPoolRefilledEventResponse> responses = new ArrayList<MultiSigPoolRefilledEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MultiSigPoolRefilledEventResponse typedResponse = new MultiSigPoolRefilledEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MultiSigPoolRefilledEventResponse> multiSigPoolRefilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MultiSigPoolRefilledEventResponse>() {
            @Override
            public MultiSigPoolRefilledEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MULTISIGPOOLREFILLED_EVENT, log);
                MultiSigPoolRefilledEventResponse typedResponse = new MultiSigPoolRefilledEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<MultiSigPoolRefilledEventResponse> multiSigPoolRefilledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MULTISIGPOOLREFILLED_EVENT));
        return multiSigPoolRefilledEventFlowable(filter);
    }

    public List<NewOwnerPendingEventResponse> getNewOwnerPendingEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWOWNERPENDING_EVENT, transactionReceipt);
        ArrayList<NewOwnerPendingEventResponse> responses = new ArrayList<NewOwnerPendingEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewOwnerPendingEventResponse typedResponse = new NewOwnerPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.currentOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pendingOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewOwnerPendingEventResponse> newOwnerPendingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewOwnerPendingEventResponse>() {
            @Override
            public NewOwnerPendingEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWOWNERPENDING_EVENT, log);
                NewOwnerPendingEventResponse typedResponse = new NewOwnerPendingEventResponse();
                typedResponse.log = log;
                typedResponse.currentOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pendingOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewOwnerPendingEventResponse> newOwnerPendingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWOWNERPENDING_EVENT));
        return newOwnerPendingEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RatifyPoolRefilledEventResponse> getRatifyPoolRefilledEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RATIFYPOOLREFILLED_EVENT, transactionReceipt);
        ArrayList<RatifyPoolRefilledEventResponse> responses = new ArrayList<RatifyPoolRefilledEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RatifyPoolRefilledEventResponse typedResponse = new RatifyPoolRefilledEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RatifyPoolRefilledEventResponse> ratifyPoolRefilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RatifyPoolRefilledEventResponse>() {
            @Override
            public RatifyPoolRefilledEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RATIFYPOOLREFILLED_EVENT, log);
                RatifyPoolRefilledEventResponse typedResponse = new RatifyPoolRefilledEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<RatifyPoolRefilledEventResponse> ratifyPoolRefilledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RATIFYPOOLREFILLED_EVENT));
        return ratifyPoolRefilledEventFlowable(filter);
    }

    public List<RequestMintEventResponse> getRequestMintEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTMINT_EVENT, transactionReceipt);
        ArrayList<RequestMintEventResponse> responses = new ArrayList<RequestMintEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestMintEventResponse typedResponse = new RequestMintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.mintKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RequestMintEventResponse> requestMintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RequestMintEventResponse>() {
            @Override
            public RequestMintEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REQUESTMINT_EVENT, log);
                RequestMintEventResponse typedResponse = new RequestMintEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.mintKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RequestMintEventResponse> requestMintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTMINT_EVENT));
        return requestMintEventFlowable(filter);
    }

    public List<RequestReclaimContractEventResponse> getRequestReclaimContractEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTRECLAIMCONTRACT_EVENT, transactionReceipt);
        ArrayList<RequestReclaimContractEventResponse> responses = new ArrayList<RequestReclaimContractEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestReclaimContractEventResponse typedResponse = new RequestReclaimContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.other = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RequestReclaimContractEventResponse> requestReclaimContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RequestReclaimContractEventResponse>() {
            @Override
            public RequestReclaimContractEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REQUESTRECLAIMCONTRACT_EVENT, log);
                RequestReclaimContractEventResponse typedResponse = new RequestReclaimContractEventResponse();
                typedResponse.log = log;
                typedResponse.other = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RequestReclaimContractEventResponse> requestReclaimContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTRECLAIMCONTRACT_EVENT));
        return requestReclaimContractEventFlowable(filter);
    }

    public List<RevokeMintEventResponse> getRevokeMintEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REVOKEMINT_EVENT, transactionReceipt);
        ArrayList<RevokeMintEventResponse> responses = new ArrayList<RevokeMintEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RevokeMintEventResponse typedResponse = new RevokeMintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RevokeMintEventResponse> revokeMintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RevokeMintEventResponse>() {
            @Override
            public RevokeMintEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REVOKEMINT_EVENT, log);
                RevokeMintEventResponse typedResponse = new RevokeMintEventResponse();
                typedResponse.log = log;
                typedResponse.opIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RevokeMintEventResponse> revokeMintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVOKEMINT_EVENT));
        return revokeMintEventFlowable(filter);
    }

    public List<SetRegistryEventResponse> getSetRegistryEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETREGISTRY_EVENT, transactionReceipt);
        ArrayList<SetRegistryEventResponse> responses = new ArrayList<SetRegistryEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetRegistryEventResponse typedResponse = new SetRegistryEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.registry = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetRegistryEventResponse> setRegistryEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetRegistryEventResponse>() {
            @Override
            public SetRegistryEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETREGISTRY_EVENT, log);
                SetRegistryEventResponse typedResponse = new SetRegistryEventResponse();
                typedResponse.log = log;
                typedResponse.registry = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetRegistryEventResponse> setRegistryEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETREGISTRY_EVENT));
        return setRegistryEventFlowable(filter);
    }

    public List<SetTokenEventResponse> getSetTokenEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETTOKEN_EVENT, transactionReceipt);
        ArrayList<SetTokenEventResponse> responses = new ArrayList<SetTokenEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetTokenEventResponse typedResponse = new SetTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetTokenEventResponse> setTokenEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetTokenEventResponse>() {
            @Override
            public SetTokenEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETTOKEN_EVENT, log);
                SetTokenEventResponse typedResponse = new SetTokenEventResponse();
                typedResponse.log = log;
                typedResponse.newContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetTokenEventResponse> setTokenEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTOKEN_EVENT));
        return setTokenEventFlowable(filter);
    }

    public List<TransferMintKeyEventResponse> getTransferMintKeyEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERMINTKEY_EVENT, transactionReceipt);
        ArrayList<TransferMintKeyEventResponse> responses = new ArrayList<TransferMintKeyEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferMintKeyEventResponse typedResponse = new TransferMintKeyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousMintKey = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newMintKey = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferMintKeyEventResponse> transferMintKeyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferMintKeyEventResponse>() {
            @Override
            public TransferMintKeyEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERMINTKEY_EVENT, log);
                TransferMintKeyEventResponse typedResponse = new TransferMintKeyEventResponse();
                typedResponse.log = log;
                typedResponse.previousMintKey = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newMintKey = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferMintKeyEventResponse> transferMintKeyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERMINTKEY_EVENT));
        return transferMintKeyEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> IS_GAS_REFUNDER() {
        final Function function = new Function(FUNC_IS_GAS_REFUNDER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> IS_MINT_PAUSER() {
        final Function function = new Function(FUNC_IS_MINT_PAUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> IS_MINT_RATIFIER() {
        final Function function = new Function(FUNC_IS_MINT_RATIFIER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> IS_REDEMPTION_ADMIN() {
        final Function function = new Function(FUNC_IS_REDEMPTION_ADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> IS_REGISTRY_ADMIN() {
        final Function function = new Function(FUNC_IS_REGISTRY_ADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> MULTISIG_MINT_SIGS() {
        final Function function = new Function(FUNC_MULTISIG_MINT_SIGS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> PAUSED_IMPLEMENTATION() {
        final Function function = new Function(FUNC_PAUSED_IMPLEMENTATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> RATIFY_MINT_SIGS() {
        final Function function = new Function(FUNC_RATIFY_MINT_SIGS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> canFinalize(BigInteger _index) {
        final Function function = new Function(FUNC_CANFINALIZE,
                Arrays.<Type>asList(new Uint256(_index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> claimOwnership() {
        final Function function = new Function(
                FUNC_CLAIMOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claimTrueCurrencyProxyOwnership() {
        final Function function = new Function(
                FUNC_CLAIMTRUECURRENCYPROXYOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> fastPause() {
        final Function function = new Function(FUNC_FASTPAUSE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> finalizeMint(BigInteger _index) {
        final Function function = new Function(
                FUNC_FINALIZEMINT,
                Arrays.<Type>asList(new Uint256(_index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasEnoughApproval(BigInteger _numberOfApproval, BigInteger _value) {
        final Function function = new Function(FUNC_HASENOUGHAPPROVAL,
                Arrays.<Type>asList(new Uint256(_numberOfApproval),
                        new Uint256(_value)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> initialized() {
        final Function function = new Function(FUNC_INITIALIZED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> instantMint(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_INSTANTMINT,
                Arrays.<Type>asList(new Address(160, _to),
                        new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> instantMintLimit() {
        final Function function = new Function(FUNC_INSTANTMINTLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> instantMintPool() {
        final Function function = new Function(FUNC_INSTANTMINTPOOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> instantMintThreshold() {
        final Function function = new Function(FUNC_INSTANTMINTTHRESHOLD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> invalidateAllPendingMints() {
        final Function function = new Function(
                FUNC_INVALIDATEALLPENDINGMINTS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> mintKey() {
        final Function function = new Function(FUNC_MINTKEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> mintOperationCount() {
        final Function function = new Function(FUNC_MINTOPERATIONCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean>> mintOperations(BigInteger param0) {
        final Function function = new Function(FUNC_MINTOPERATIONS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Bool>() {
                }));
        return new RemoteFunctionCall<Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> mintPaused() {
        final Function function = new Function(FUNC_MINTPAUSED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> mintReqInvalidBeforeThisBlock() {
        final Function function = new Function(FUNC_MINTREQINVALIDBEFORETHISBLOCK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> multiSigMintLimit() {
        final Function function = new Function(FUNC_MULTISIGMINTLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> multiSigMintPool() {
        final Function function = new Function(FUNC_MULTISIGMINTPOOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> multiSigMintThreshold() {
        final Function function = new Function(FUNC_MULTISIGMINTTHRESHOLD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pauseMint(BigInteger _opIndex) {
        final Function function = new Function(
                FUNC_PAUSEMINT,
                Arrays.<Type>asList(new Uint256(_opIndex)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pauseMints() {
        final Function function = new Function(
                FUNC_PAUSEMINTS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pauseToken() {
        final Function function = new Function(
                FUNC_PAUSETOKEN,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> pendingOwner() {
        final Function function = new Function(FUNC_PENDINGOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> ratifiedMintLimit() {
        final Function function = new Function(FUNC_RATIFIEDMINTLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> ratifiedMintPool() {
        final Function function = new Function(FUNC_RATIFIEDMINTPOOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> ratifiedMintThreshold() {
        final Function function = new Function(FUNC_RATIFIEDMINTTHRESHOLD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> ratifiedPoolRefillApprovals(BigInteger param0) {
        final Function function = new Function(FUNC_RATIFIEDPOOLREFILLAPPROVALS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> ratifyMint(BigInteger _index, String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_RATIFYMINT,
                Arrays.<Type>asList(new Uint256(_index),
                        new Address(160, _to),
                        new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reclaimEther(String _to) {
        final Function function = new Function(
                FUNC_RECLAIMETHER,
                Arrays.<Type>asList(new Address(160, _to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reclaimToken(String _token, String _to) {
        final Function function = new Function(
                FUNC_RECLAIMTOKEN,
                Arrays.<Type>asList(new Address(160, _token),
                        new Address(160, _to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refillInstantMintPool() {
        final Function function = new Function(
                FUNC_REFILLINSTANTMINTPOOL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refillMultiSigMintPool() {
        final Function function = new Function(
                FUNC_REFILLMULTISIGMINTPOOL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refillRatifiedMintPool() {
        final Function function = new Function(
                FUNC_REFILLRATIFIEDMINTPOOL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refundGasWithHook(String hookContract) {
        final Function function = new Function(
                FUNC_REFUNDGASWITHHOOK,
                Arrays.<Type>asList(new Address(160, hookContract)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> registry() {
        final Function function = new Function(FUNC_REGISTRY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> requestMint(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_REQUESTMINT,
                Arrays.<Type>asList(new Address(160, _to),
                        new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestReclaimEther() {
        final Function function = new Function(
                FUNC_REQUESTRECLAIMETHER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestReclaimToken(String _token) {
        final Function function = new Function(
                FUNC_REQUESTRECLAIMTOKEN,
                Arrays.<Type>asList(new Address(160, _token)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeMint(BigInteger _index) {
        final Function function = new Function(
                FUNC_REVOKEMINT,
                Arrays.<Type>asList(new Uint256(_index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBurnBounds(BigInteger _min, BigInteger _max) {
        final Function function = new Function(
                FUNC_SETBURNBOUNDS,
                Arrays.<Type>asList(new Uint256(_min),
                        new Uint256(_max)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setCanBurn(String burner, Boolean canBurn) {
        final Function function = new Function(
                FUNC_SETCANBURN,
                Arrays.<Type>asList(new Address(160, burner),
                        new Bool(canBurn)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMintLimits(BigInteger _instant, BigInteger _ratified, BigInteger _multiSig) {
        final Function function = new Function(
                FUNC_SETMINTLIMITS,
                Arrays.<Type>asList(new Uint256(_instant),
                        new Uint256(_ratified),
                        new Uint256(_multiSig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMintThresholds(BigInteger _instant, BigInteger _ratified, BigInteger _multiSig) {
        final Function function = new Function(
                FUNC_SETMINTTHRESHOLDS,
                Arrays.<Type>asList(new Uint256(_instant),
                        new Uint256(_ratified),
                        new Uint256(_multiSig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRegistry(String _registry) {
        final Function function = new Function(
                FUNC_SETREGISTRY,
                Arrays.<Type>asList(new Address(160, _registry)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setToken(String _newContract) {
        final Function function = new Function(
                FUNC_SETTOKEN,
                Arrays.<Type>asList(new Address(160, _newContract)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> token() {
        final Function function = new Function(FUNC_TOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferMintKey(String _newMintKey) {
        final Function function = new Function(
                FUNC_TRANSFERMINTKEY,
                Arrays.<Type>asList(new Address(160, _newMintKey)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferTrueCurrencyProxyOwnership(String _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFERTRUECURRENCYPROXYOWNERSHIP,
                Arrays.<Type>asList(new Address(160, _newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> trueRewardManager() {
        final Function function = new Function(FUNC_TRUEREWARDMANAGER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unpauseMint(BigInteger _opIndex) {
        final Function function = new Function(
                FUNC_UNPAUSEMINT,
                Arrays.<Type>asList(new Uint256(_opIndex)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpauseMints() {
        final Function function = new Function(
                FUNC_UNPAUSEMINTS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTrueCurrencyProxyImplTo(String _implementation) {
        final Function function = new Function(
                FUNC_UPGRADETRUECURRENCYPROXYIMPLTO,
                Arrays.<Type>asList(new Address(160, _implementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TUSDController load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TUSDController(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public TUSDController load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TUSDController(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TUSDController load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TUSDController(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TUSDController load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TUSDController(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TUSDController> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TUSDController.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TUSDController> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TUSDController.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TUSDController> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TUSDController.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TUSDController> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TUSDController.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ProxyOwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class NewPendingOwnerEventResponse extends BaseEventResponse {
        public String currentOwner;

        public String pendingOwner;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class AllMintsPausedEventResponse extends BaseEventResponse {
        public Boolean status;
    }

    public static class FastPauseSetEventResponse extends BaseEventResponse {
        public String _newFastPause;
    }

    public static class FinalizeMintEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger value;

        public BigInteger opIndex;

        public String mintKey;
    }

    public static class InstantMintEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger value;

        public String mintKey;
    }

    public static class InstantPoolRefilledEventResponse extends BaseEventResponse {
    }

    public static class MintApprovedEventResponse extends BaseEventResponse {
        public String approver;

        public BigInteger opIndex;
    }

    public static class MintLimitsChangedEventResponse extends BaseEventResponse {
        public BigInteger instant;

        public BigInteger ratified;

        public BigInteger multiSig;
    }

    public static class MintPausedEventResponse extends BaseEventResponse {
        public BigInteger opIndex;

        public Boolean status;
    }

    public static class MintRatifiedEventResponse extends BaseEventResponse {
        public BigInteger opIndex;

        public String ratifier;
    }

    public static class MintThresholdChangedEventResponse extends BaseEventResponse {
        public BigInteger instant;

        public BigInteger ratified;

        public BigInteger multiSig;
    }

    public static class MultiSigPoolRefilledEventResponse extends BaseEventResponse {
    }

    public static class NewOwnerPendingEventResponse extends BaseEventResponse {
        public String currentOwner;

        public String pendingOwner;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RatifyPoolRefilledEventResponse extends BaseEventResponse {
    }

    public static class RequestMintEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger value;

        public BigInteger opIndex;

        public String mintKey;
    }

    public static class RequestReclaimContractEventResponse extends BaseEventResponse {
        public String other;
    }

    public static class RevokeMintEventResponse extends BaseEventResponse {
        public BigInteger opIndex;
    }

    public static class SetRegistryEventResponse extends BaseEventResponse {
        public String registry;
    }

    public static class SetTokenEventResponse extends BaseEventResponse {
        public String newContract;
    }

    public static class TransferMintKeyEventResponse extends BaseEventResponse {
        public String previousMintKey;

        public String newMintKey;
    }
}
