package com.monitor.abi;


import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class TUSD extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5061002333640100000000610028810204565b61005d565b604080517f747275655553442e70726f78792e6f776e6572000000000000000000000000008152905190819003601301902055565b6105c78061006c6000396000f3006080604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a281146101085780630add8140146101395780633659cfe61461014e5780635c60da1b146101715780639965b3d614610186578063f1739cae1461019b575b60006100816101bc565b9050600160a060020a03811615156100e3576040805160e560020a62461bcd02815260206004820152601f60248201527f696d706c656d656e746174696f6e20636f6e7472616374206e6f742073657400604482015290519081900360640190fd5b60405136600082376000803683855af43d806000843e818015610104578184f35b8184fd5b34801561011457600080fd5b5061011d6101f2565b60408051600160a060020a039092168252519081900360200190f35b34801561014557600080fd5b5061011d610228565b34801561015a57600080fd5b5061016f600160a060020a036004351661025e565b005b34801561017d57600080fd5b5061011d6101bc565b34801561019257600080fd5b5061016f6102dc565b3480156101a757600080fd5b5061016f600160a060020a03600435166103b8565b604080517f747275655553442e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c0190205490565b604080517f747275655553442e70726f78792e6f776e657200000000000000000000000000815290519081900360130190205490565b604080517f747275655553442e70656e64696e672e70726f78792e6f776e657200000000008152905190819003601b0190205490565b6102666101f2565b600160a060020a031633600160a060020a03161415156102d0576040805160e560020a62461bcd02815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b6102d981610496565b50565b6102e4610228565b600160a060020a031633600160a060020a031614151561034e576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c792070656e64696e672050726f7879204f776e65720000000000000000604482015290519081900360640190fd5b610356610228565b600160a060020a03166103676101f2565b600160a060020a03167f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd960405160405180910390a36103ac6103a7610228565b6104fc565b6103b66000610531565b565b6103c06101f2565b600160a060020a031633600160a060020a031614151561042a576040805160e560020a62461bcd02815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561043f57600080fd5b61044881610531565b7fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b6104716101f2565b60408051600160a060020a03928316815291841660208301528051918290030190a150565b60006104a06101bc565b9050600160a060020a0380821690831614156104bb57600080fd5b6104c482610566565b604051600160a060020a038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050565b604080517f747275655553442e70726f78792e6f776e6572000000000000000000000000008152905190819003601301902055565b604080517f747275655553442e70656e64696e672e70726f78792e6f776e657200000000008152905190819003601b01902055565b604080517f747275655553442e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c019020555600a165627a7a7230582066d4b5932adad66dd7b19bdf5b36c25e9e99e563f06c779eeef9427bb3c9c767002960806040526005805460ff19169055600060068190556007556103e860155534801561002a57600080fd5b50600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3612314806100836000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063554249b31161012a57806395d89b41116100bd578063a9059cbb1161008c578063dd62ed3e11610071578063dd62ed3e1461073b578063e30c397814610776578063f2fde38b1461077e57610226565b8063a9059cbb146106c7578063d01dd6d21461070057610226565b806395d89b41146106535780639a6a30a41461065b5780639cd1a12114610395578063a457c2d71461068e57610226565b806380749656116100f957806380749656146105ac57806388ee39cc146105e75780638da5cb5b1461062257806393d3173a1461039557610226565b8063554249b3146103955780635c131d701461056957806370a082311461057157806376e71dd8146105a457610226565b8063313ce567116101bd57806342966c681161018c5780634df6b45d116101715780634df6b45d146104f55780634e71e0c81461053e578063520060501461054657610226565b806342966c68146104a557806343a468c8146104c257610226565b8063313ce567146103f65780633820a686146103fe578063395093511461043157806340c10f191461046a57610226565b806318160ddd116101f957806318160ddd1461034a57806323b872dd14610352578063296f4000146103955780632e440403146103d857610226565b806302d3fdc91461022b57806306fdde0314610245578063095ea7b3146102c257806309ab8bba1461030f575b600080fd5b6102336107b1565b60408051918252519081900360200190f35b61024d6107b7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028757818101518382015260200161026f565b50505050905090810190601f1680156102b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fb600480360360408110156102d857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107ee565b604080519115158252519081900360200190f35b6102336004803603604081101561032557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661080b565b61023361081e565b6102fb6004803603606081101561036857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610824565b6102fb600480360360608110156103ab57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013591604090910135166108cb565b6103e0610904565b6040805160ff9092168252519081900360200190f35b6103e0610909565b6102fb6004803603602081101561041457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661090e565b6102fb6004803603604081101561044757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610923565b6104a36004803603604081101561048057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610984565b005b6104a3600480360360208110156104bb57600080fd5b5035610af4565b610233600480360360208110156104d857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b01565b6102fb6004803603608081101561050b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160600135166108cb565b6104a3610b12565b6104a36004803603604081101561055c57600080fd5b5080359060200135610c14565b610233610d08565b6102336004803603602081101561058757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d0e565b610233610d36565b6104a3600480360360408110156105c257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610d45565b6104a3600480360360408110156105fd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610e07565b61062a610fbc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61024d610fd8565b6104a36004803603602081101561067157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661100f565b6102fb600480360360408110156106a457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356110c1565b6102fb600480360360408110156106dd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561113c565b6104a36004803603604081101561071657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611150565b6102336004803603604081101561075157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661129f565b61062a6112d7565b6104a36004803603602081101561079457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112f3565b60065481565b60408051808201909152600781527f5472756555534400000000000000000000000000000000000000000000000000602082015290565b60006108026107fb6113a6565b84846113aa565b50600192915050565b6000610817838361129f565b9392505050565b60045490565b600061083184848461148d565b6108c18461083d6113a6565b6108bc856040518060600160405280602881526020016121136028913973ffffffffffffffffffffffffffffffffffffffff8a166000908152600f60205260408120906108886113a6565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919063ffffffff61151016565b6113aa565b5060019392505050565b600060405162461bcd60e51b815260040180806020018281038252602c815260200180612234602c913960400191505060405180910390fd5b600290565b601290565b60176020526000908152604090205460ff1681565b60006108026109306113a6565b846108bc85600f60006109416113a6565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff6115a716565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109f0576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526016602052604090205460ff1615610a555760405162461bcd60e51b81526004018080602001828103825260248152602001806120586024913960400191505060405180910390fd5b610a5e82611601565b15610a9a5760405162461bcd60e51b815260040180806020018281038252602d81526020018061213b602d913960400191505060405180910390fd5b610aa48282611642565b60408051828152905173ffffffffffffffffffffffffffffffffffffffff8416917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a25050565b610afe3382611767565b50565b6000610b0c82610d0e565b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b7e576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792070656e64696e67206f776e65720000000000000000000000000000604482015290519081900360640190fd5b6001546000805460405173ffffffffffffffffffffffffffffffffffffffff93841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c80576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b80821115610cbf5760405162461bcd60e51b81526004018080602001828103825260228152602001806120f16022913960400191505060405180910390fd5b60068290556007819055604080518381526020810183905281517f21d54a4c1f750b4f93779e3e8b4de89db3f31bab8f203e68569727fee906cc32929181900390910190a15050565b60075481565b73ffffffffffffffffffffffffffffffffffffffff166000908152600e602052604090205490565b6000610d4061081e565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610db1576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260176020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e73576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff8516916370a0823191602480820192602092909190829003018186803b158015610ee357600080fd5b505afa158015610ef7573d6000803e3d6000fd5b505050506040513d6020811015610f0d57600080fd5b5051604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820184905291519293509085169163a9059cbb916044808201926020929091908290030181600087803b158015610f8b57600080fd5b505af1158015610f9f573d6000803e3d6000fd5b505050506040513d6020811015610fb557600080fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60408051808201909152600481527f5455534400000000000000000000000000000000000000000000000000000000602082015290565b60005473ffffffffffffffffffffffffffffffffffffffff16331461107b576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216904780156108fc02916000818181858888f193505050501580156110bd573d6000803e3d6000fd5b5050565b60006108026110ce6113a6565b846108bc8560405180606001604052806025815260200161228b60259139600f60006110f86113a6565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61151016565b60006108026111496113a6565b848461148d565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111bc576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b621000008273ffffffffffffffffffffffffffffffffffffffff1610156112145760405162461bcd60e51b815260040180806020018281038252603f815260200180612168603f913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526016602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016851515908117909155825190815291517fcf3473b85df1594d47b6958f29a32bea0abff9dd68296f7bf33443646793cfd89281900390910190a25050565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600f6020908152604080832093909416825291909152205490565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461135f576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3390565b73ffffffffffffffffffffffffffffffffffffffff831660009081526016602052604090205460ff161561140f5760405162461bcd60e51b81526004018080602001828103825260298152602001806120a26029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526016602052604090205460ff161580611442575080155b61147d5760405162461bcd60e51b815260040180806020018281038252602b815260200180611fbc602b913960400191505060405180910390fd5b6114888383836117d5565b505050565b6114ab827333091de8341533468d13a80c5a670f4f47cc649f6118e8565b6114c9827350e2719208914764087e68c32bc5aac321f5b04d6118e8565b6114e7827371d69e5481a9b7be515e20b38a3f62dab7170d786118e8565b611505827390fdaa85d52db6065d466b86f16bf840d514a4886118e8565b6114888383836119a7565b6000818484111561159f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561156457818101518382015260200161154c565b50505050905090810190601f1680156115915780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610817576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000621000008273ffffffffffffffffffffffffffffffffffffffff16108015610b0c57505073ffffffffffffffffffffffffffffffffffffffff16151590565b73ffffffffffffffffffffffffffffffffffffffff82166116aa576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6116b660008383611488565b6004546116c9908263ffffffff6115a716565b60045573ffffffffffffffffffffffffffffffffffffffff82166000908152600e6020526040902054611702908263ffffffff6115a716565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600e602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526017602052604090205460ff166117cb5760405162461bcd60e51b815260040180806020018281038252602b815260200180612260602b913960400191505060405180910390fd5b6110bd8282611af0565b73ffffffffffffffffffffffffffffffffffffffff83166118275760405162461bcd60e51b81526004018080602001828103825260248152602001806121ed6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166118795760405162461bcd60e51b81526004018080602001828103825260228152602001806120366022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600f6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60148173ffffffffffffffffffffffffffffffffffffffff16901c60148373ffffffffffffffffffffffffffffffffffffffff16901c14158061195657508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6110bd576040805162461bcd60e51b815260206004820152601560248201527f4175746f73776565702069732064697361626c65640000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526016602052604090205460ff1615611a0c5760405162461bcd60e51b81526004018080602001828103825260238152602001806122116023913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526016602052604090205460ff1615611a715760405162461bcd60e51b81526004018080602001828103825260268152602001806120cb6026913960400191505060405180910390fd5b611a7a82611601565b15611ae557611ab08383611aab611a9e85662386f26fc1000063ffffffff611bcc16565b859063ffffffff611c0e16565b611c50565b611ae082611adb611ace84662386f26fc1000063ffffffff611bcc16565b849063ffffffff611c0e16565b611767565b611488565b611488838383611c50565b600654811015611b315760405162461bcd60e51b815260040180806020018281038252602d815260200180611fe7602d913960400191505060405180910390fd5b600754811115611b725760405162461bcd60e51b815260040180806020018281038252602f8152602001806122b0602f913960400191505060405180910390fd5b611b7c8282611dfa565b60408051828152905173ffffffffffffffffffffffffffffffffffffffff8416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600061081783836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250611f36565b600061081783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611510565b73ffffffffffffffffffffffffffffffffffffffff8316611ca25760405162461bcd60e51b81526004018080602001828103825260258152602001806121c86025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611cf45760405162461bcd60e51b8152600401808060200182810382526023815260200180611f996023913960400191505060405180910390fd5b611cff838383611488565b611d4f8160405180606001604052806026815260200161207c6026913973ffffffffffffffffffffffffffffffffffffffff86166000908152600e6020526040902054919063ffffffff61151016565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600e60205260408082209390935590841681522054611d91908263ffffffff6115a716565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600e602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8216611e4c5760405162461bcd60e51b81526004018080602001828103825260218152602001806121a76021913960400191505060405180910390fd5b611e5882600083611488565b611ea8816040518060600160405280602281526020016120146022913973ffffffffffffffffffffffffffffffffffffffff85166000908152600e6020526040902054919063ffffffff61151016565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020526040902055600454611ee1908263ffffffff611c0e16565b60045560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008183611f855760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561156457818101518382015260200161154c565b50828481611f8f57fe5b0694935050505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573735472756543757272656e63793a20746f6b656e73207370656e64657220697320626c61636b6c69737465644275726e61626c65546f6b656e57697468426f756e64733a2062656c6f77206d696e206275726e20626f756e6445524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f20616464726573735472756543757272656e63793a206163636f756e7420697320626c61636b6c697374656445524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655472756543757272656e63793a20746f6b656e73206f776e657220697320626c61636b6c69737465645472756543757272656e63793a20726563697069656e7420697320626c61636b6c69737465644275726e61626c65546f6b656e57697468426f756e64733a206d696e203e206d617845524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655472756543757272656e63793a206163636f756e74206973206120726564656d7074696f6e20616464726573735472756543757272656e63793a20626c61636b6c697374696e67206f6620726564656d7074696f6e2061646472657373206973206e6f7420616c6c6f77656445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735472756543757272656e63793a2073656e64657220697320626c61636b6c697374656444656c656761746545524332303a20547275655553442028563129206973206e6f7420737570706f727465645472756543757272656e63793a2063616e6e6f74206275726e2066726f6d2074686973206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f4275726e61626c65546f6b656e57697468426f756e64733a2065786365656473206d6178206275726e20626f756e64a26469706673582212207d1c009fdf9b090c8909e4e1e27806a03c8b87c695de6c5887a311a432beae5364736f6c634300060a0033\n" + "608060405234801561001057600080fd5b5061002333640100000000610028810204565b61005d565b604080517f747275655553442e70726f78792e6f776e6572000000000000000000000000008152905190819003601301902055565b6105c78061006c6000396000f3006080604052600436106100775763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a281146101085780630add8140146101395780633659cfe61461014e5780635c60da1b146101715780639965b3d614610186578063f1739cae1461019b575b60006100816101bc565b9050600160a060020a03811615156100e3576040805160e560020a62461bcd02815260206004820152601f60248201527f696d706c656d656e746174696f6e20636f6e7472616374206e6f742073657400604482015290519081900360640190fd5b60405136600082376000803683855af43d806000843e818015610104578184f35b8184fd5b34801561011457600080fd5b5061011d6101f2565b60408051600160a060020a039092168252519081900360200190f35b34801561014557600080fd5b5061011d610228565b34801561015a57600080fd5b5061016f600160a060020a036004351661025e565b005b34801561017d57600080fd5b5061011d6101bc565b34801561019257600080fd5b5061016f6102dc565b3480156101a757600080fd5b5061016f600160a060020a03600435166103b8565b604080517f747275655553442e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c0190205490565b604080517f747275655553442e70726f78792e6f776e657200000000000000000000000000815290519081900360130190205490565b604080517f747275655553442e70656e64696e672e70726f78792e6f776e657200000000008152905190819003601b0190205490565b6102666101f2565b600160a060020a031633600160a060020a03161415156102d0576040805160e560020a62461bcd02815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b6102d981610496565b50565b6102e4610228565b600160a060020a031633600160a060020a031614151561034e576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c792070656e64696e672050726f7879204f776e65720000000000000000604482015290519081900360640190fd5b610356610228565b600160a060020a03166103676101f2565b600160a060020a03167f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd960405160405180910390a36103ac6103a7610228565b6104fc565b6103b66000610531565b565b6103c06101f2565b600160a060020a031633600160a060020a031614151561042a576040805160e560020a62461bcd02815260206004820152601060248201527f6f6e6c792050726f7879204f776e657200000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038116151561043f57600080fd5b61044881610531565b7fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b6104716101f2565b60408051600160a060020a03928316815291841660208301528051918290030190a150565b60006104a06101bc565b9050600160a060020a0380821690831614156104bb57600080fd5b6104c482610566565b604051600160a060020a038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25050565b604080517f747275655553442e70726f78792e6f776e6572000000000000000000000000008152905190819003601301902055565b604080517f747275655553442e70656e64696e672e70726f78792e6f776e657200000000008152905190819003601b01902055565b604080517f747275655553442e70726f78792e696d706c656d656e746174696f6e000000008152905190819003601c019020555600a165627a7a7230582066d4b5932adad66dd7b19bdf5b36c25e9e99e563f06c779eeef9427bb3c9c767002960806040526005805460ff19169055600060068190556007556103e860155534801561002a57600080fd5b50600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3612314806100836000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063554249b31161012a57806395d89b41116100bd578063a9059cbb1161008c578063dd62ed3e11610071578063dd62ed3e1461073b578063e30c397814610776578063f2fde38b1461077e57610226565b8063a9059cbb146106c7578063d01dd6d21461070057610226565b806395d89b41146106535780639a6a30a41461065b5780639cd1a12114610395578063a457c2d71461068e57610226565b806380749656116100f957806380749656146105ac57806388ee39cc146105e75780638da5cb5b1461062257806393d3173a1461039557610226565b8063554249b3146103955780635c131d701461056957806370a082311461057157806376e71dd8146105a457610226565b8063313ce567116101bd57806342966c681161018c5780634df6b45d116101715780634df6b45d146104f55780634e71e0c81461053e578063520060501461054657610226565b806342966c68146104a557806343a468c8146104c257610226565b8063313ce567146103f65780633820a686146103fe578063395093511461043157806340c10f191461046a57610226565b806318160ddd116101f957806318160ddd1461034a57806323b872dd14610352578063296f4000146103955780632e440403146103d857610226565b806302d3fdc91461022b57806306fdde0314610245578063095ea7b3146102c257806309ab8bba1461030f575b600080fd5b6102336107b1565b60408051918252519081900360200190f35b61024d6107b7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028757818101518382015260200161026f565b50505050905090810190601f1680156102b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fb600480360360408110156102d857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107ee565b604080519115158252519081900360200190f35b6102336004803603604081101561032557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661080b565b61023361081e565b6102fb6004803603606081101561036857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610824565b6102fb600480360360608110156103ab57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013591604090910135166108cb565b6103e0610904565b6040805160ff9092168252519081900360200190f35b6103e0610909565b6102fb6004803603602081101561041457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661090e565b6102fb6004803603604081101561044757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610923565b6104a36004803603604081101561048057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610984565b005b6104a3600480360360208110156104bb57600080fd5b5035610af4565b610233600480360360208110156104d857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b01565b6102fb6004803603608081101561050b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160600135166108cb565b6104a3610b12565b6104a36004803603604081101561055c57600080fd5b5080359060200135610c14565b610233610d08565b6102336004803603602081101561058757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d0e565b610233610d36565b6104a3600480360360408110156105c257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610d45565b6104a3600480360360408110156105fd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610e07565b61062a610fbc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61024d610fd8565b6104a36004803603602081101561067157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661100f565b6102fb600480360360408110156106a457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356110c1565b6102fb600480360360408110156106dd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561113c565b6104a36004803603604081101561071657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611150565b6102336004803603604081101561075157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661129f565b61062a6112d7565b6104a36004803603602081101561079457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112f3565b60065481565b60408051808201909152600781527f5472756555534400000000000000000000000000000000000000000000000000602082015290565b60006108026107fb6113a6565b84846113aa565b50600192915050565b6000610817838361129f565b9392505050565b60045490565b600061083184848461148d565b6108c18461083d6113a6565b6108bc856040518060600160405280602881526020016121136028913973ffffffffffffffffffffffffffffffffffffffff8a166000908152600f60205260408120906108886113a6565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919063ffffffff61151016565b6113aa565b5060019392505050565b600060405162461bcd60e51b815260040180806020018281038252602c815260200180612234602c913960400191505060405180910390fd5b600290565b601290565b60176020526000908152604090205460ff1681565b60006108026109306113a6565b846108bc85600f60006109416113a6565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff6115a716565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109f0576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526016602052604090205460ff1615610a555760405162461bcd60e51b81526004018080602001828103825260248152602001806120586024913960400191505060405180910390fd5b610a5e82611601565b15610a9a5760405162461bcd60e51b815260040180806020018281038252602d81526020018061213b602d913960400191505060405180910390fd5b610aa48282611642565b60408051828152905173ffffffffffffffffffffffffffffffffffffffff8416917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a25050565b610afe3382611767565b50565b6000610b0c82610d0e565b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b7e576040805162461bcd60e51b815260206004820152601260248201527f6f6e6c792070656e64696e67206f776e65720000000000000000000000000000604482015290519081900360640190fd5b6001546000805460405173ffffffffffffffffffffffffffffffffffffffff93841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c80576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b80821115610cbf5760405162461bcd60e51b81526004018080602001828103825260228152602001806120f16022913960400191505060405180910390fd5b60068290556007819055604080518381526020810183905281517f21d54a4c1f750b4f93779e3e8b4de89db3f31bab8f203e68569727fee906cc32929181900390910190a15050565b60075481565b73ffffffffffffffffffffffffffffffffffffffff166000908152600e602052604090205490565b6000610d4061081e565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610db1576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260176020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e73576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff8516916370a0823191602480820192602092909190829003018186803b158015610ee357600080fd5b505afa158015610ef7573d6000803e3d6000fd5b505050506040513d6020811015610f0d57600080fd5b5051604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820184905291519293509085169163a9059cbb916044808201926020929091908290030181600087803b158015610f8b57600080fd5b505af1158015610f9f573d6000803e3d6000fd5b505050506040513d6020811015610fb557600080fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60408051808201909152600481527f5455534400000000000000000000000000000000000000000000000000000000602082015290565b60005473ffffffffffffffffffffffffffffffffffffffff16331461107b576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216904780156108fc02916000818181858888f193505050501580156110bd573d6000803e3d6000fd5b5050565b60006108026110ce6113a6565b846108bc8560405180606001604052806025815260200161228b60259139600f60006110f86113a6565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61151016565b60006108026111496113a6565b848461148d565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111bc576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b621000008273ffffffffffffffffffffffffffffffffffffffff1610156112145760405162461bcd60e51b815260040180806020018281038252603f815260200180612168603f913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526016602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016851515908117909155825190815291517fcf3473b85df1594d47b6958f29a32bea0abff9dd68296f7bf33443646793cfd89281900390910190a25050565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600f6020908152604080832093909416825291909152205490565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461135f576040805162461bcd60e51b815260206004820152600a60248201527f6f6e6c79204f776e657200000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3390565b73ffffffffffffffffffffffffffffffffffffffff831660009081526016602052604090205460ff161561140f5760405162461bcd60e51b81526004018080602001828103825260298152602001806120a26029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526016602052604090205460ff161580611442575080155b61147d5760405162461bcd60e51b815260040180806020018281038252602b815260200180611fbc602b913960400191505060405180910390fd5b6114888383836117d5565b505050565b6114ab827333091de8341533468d13a80c5a670f4f47cc649f6118e8565b6114c9827350e2719208914764087e68c32bc5aac321f5b04d6118e8565b6114e7827371d69e5481a9b7be515e20b38a3f62dab7170d786118e8565b611505827390fdaa85d52db6065d466b86f16bf840d514a4886118e8565b6114888383836119a7565b6000818484111561159f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561156457818101518382015260200161154c565b50505050905090810190601f1680156115915780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610817576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000621000008273ffffffffffffffffffffffffffffffffffffffff16108015610b0c57505073ffffffffffffffffffffffffffffffffffffffff16151590565b73ffffffffffffffffffffffffffffffffffffffff82166116aa576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6116b660008383611488565b6004546116c9908263ffffffff6115a716565b60045573ffffffffffffffffffffffffffffffffffffffff82166000908152600e6020526040902054611702908263ffffffff6115a716565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600e602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526017602052604090205460ff166117cb5760405162461bcd60e51b815260040180806020018281038252602b815260200180612260602b913960400191505060405180910390fd5b6110bd8282611af0565b73ffffffffffffffffffffffffffffffffffffffff83166118275760405162461bcd60e51b81526004018080602001828103825260248152602001806121ed6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166118795760405162461bcd60e51b81526004018080602001828103825260228152602001806120366022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600f6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60148173ffffffffffffffffffffffffffffffffffffffff16901c60148373ffffffffffffffffffffffffffffffffffffffff16901c14158061195657508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6110bd576040805162461bcd60e51b815260206004820152601560248201527f4175746f73776565702069732064697361626c65640000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526016602052604090205460ff1615611a0c5760405162461bcd60e51b81526004018080602001828103825260238152602001806122116023913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526016602052604090205460ff1615611a715760405162461bcd60e51b81526004018080602001828103825260268152602001806120cb6026913960400191505060405180910390fd5b611a7a82611601565b15611ae557611ab08383611aab611a9e85662386f26fc1000063ffffffff611bcc16565b859063ffffffff611c0e16565b611c50565b611ae082611adb611ace84662386f26fc1000063ffffffff611bcc16565b849063ffffffff611c0e16565b611767565b611488565b611488838383611c50565b600654811015611b315760405162461bcd60e51b815260040180806020018281038252602d815260200180611fe7602d913960400191505060405180910390fd5b600754811115611b725760405162461bcd60e51b815260040180806020018281038252602f8152602001806122b0602f913960400191505060405180910390fd5b611b7c8282611dfa565b60408051828152905173ffffffffffffffffffffffffffffffffffffffff8416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600061081783836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250611f36565b600061081783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611510565b73ffffffffffffffffffffffffffffffffffffffff8316611ca25760405162461bcd60e51b81526004018080602001828103825260258152602001806121c86025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611cf45760405162461bcd60e51b8152600401808060200182810382526023815260200180611f996023913960400191505060405180910390fd5b611cff838383611488565b611d4f8160405180606001604052806026815260200161207c6026913973ffffffffffffffffffffffffffffffffffffffff86166000908152600e6020526040902054919063ffffffff61151016565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600e60205260408082209390935590841681522054611d91908263ffffffff6115a716565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600e602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8216611e4c5760405162461bcd60e51b81526004018080602001828103825260218152602001806121a76021913960400191505060405180910390fd5b611e5882600083611488565b611ea8816040518060600160405280602281526020016120146022913973ffffffffffffffffffffffffffffffffffffffff85166000908152600e6020526040902054919063ffffffff61151016565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020526040902055600454611ee1908263ffffffff611c0e16565b60045560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008183611f855760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561156457818101518382015260200161154c565b50828481611f8f57fe5b0694935050505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573735472756543757272656e63793a20746f6b656e73207370656e64657220697320626c61636b6c69737465644275726e61626c65546f6b656e57697468426f756e64733a2062656c6f77206d696e206275726e20626f756e6445524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f20616464726573735472756543757272656e63793a206163636f756e7420697320626c61636b6c697374656445524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655472756543757272656e63793a20746f6b656e73206f776e657220697320626c61636b6c69737465645472756543757272656e63793a20726563697069656e7420697320626c61636b6c69737465644275726e61626c65546f6b656e57697468426f756e64733a206d696e203e206d617845524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655472756543757272656e63793a206163636f756e74206973206120726564656d7074696f6e20616464726573735472756543757272656e63793a20626c61636b6c697374696e67206f6620726564656d7074696f6e2061646472657373206973206e6f7420616c6c6f77656445524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735472756543757272656e63793a2073656e64657220697320626c61636b6c697374656444656c656761746545524332303a20547275655553442028563129206973206e6f7420737570706f727465645472756543757272656e63793a2063616e6e6f74206275726e2066726f6d2074686973206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f4275726e61626c65546f6b656e57697468426f756e64733a2065786365656473206d6178206275726e20626f756e64a26469706673582212207d1c009fdf9b090c8909e4e1e27806a03c8b87c695de6c5887a311a432beae5364736f6c634300060a0033\n" + "\n";

    public static final String FUNC_PROXYOWNER = "proxyOwner";

    public static final String FUNC_PENDINGPROXYOWNER = "pendingProxyOwner";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_IMPLEMENTATION = "implementation";

    public static final String FUNC_CLAIMPROXYOWNERSHIP = "claimProxyOwnership";

    public static final String FUNC_TRANSFERPROXYOWNERSHIP = "transferProxyOwnership";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNMAX = "burnMax";

    public static final String FUNC_BURNMIN = "burnMin";

    public static final String FUNC_CANBURN = "canBurn";

    public static final String FUNC_CLAIMOWNERSHIP = "claimOwnership";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_DELEGATEALLOWANCE = "delegateAllowance";

    public static final String FUNC_DELEGATEAPPROVE = "delegateApprove";

    public static final String FUNC_DELEGATEBALANCEOF = "delegateBalanceOf";

    public static final String FUNC_DELEGATEDECREASEAPPROVAL = "delegateDecreaseApproval";

    public static final String FUNC_DELEGATEINCREASEAPPROVAL = "delegateIncreaseApproval";

    public static final String FUNC_DELEGATETOTALSUPPLY = "delegateTotalSupply";

    public static final String FUNC_DELEGATETRANSFER = "delegateTransfer";

    public static final String FUNC_DELEGATETRANSFERFROM = "delegateTransferFrom";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PENDINGOWNER = "pendingOwner";

    public static final String FUNC_RECLAIMETHER = "reclaimEther";

    public static final String FUNC_RECLAIMTOKEN = "reclaimToken";

    public static final String FUNC_ROUNDING = "rounding";

    public static final String FUNC_SETBLACKLISTED = "setBlacklisted";

    public static final String FUNC_SETBURNBOUNDS = "setBurnBounds";

    public static final String FUNC_SETCANBURN = "setCanBurn";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event PROXYOWNERSHIPTRANSFERRED_EVENT = new Event("ProxyOwnershipTransferred", Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }));
    ;

    public static final Event NEWPENDINGOWNER_EVENT = new Event("NewPendingOwner", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
    }, new TypeReference<Address>() {
    }));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Uint256>() {
    }));
    ;

    public static final Event BLACKLISTED_EVENT = new Event("Blacklisted", Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Bool>() {
    }));
    ;

    public static final Event BURN_EVENT = new Event("Burn", Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Uint256>() {
    }));
    ;

    public static final Event MINT_EVENT = new Event("Mint", Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Uint256>() {
    }));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }));
    ;

    public static final Event SETBURNBOUNDS_EVENT = new Event("SetBurnBounds", Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
    }, new TypeReference<Uint256>() {
    }));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
    }, new TypeReference<Address>(true) {
    }, new TypeReference<Uint256>() {
    }));
    ;

    @Deprecated
    protected TUSD(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TUSD(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TUSD(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TUSD(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> proxyOwner() {
        final Function function = new Function(FUNC_PROXYOWNER, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> pendingProxyOwner() {
        final Function function = new Function(FUNC_PENDINGPROXYOWNER, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String implementation) {
        final Function function = new Function(FUNC_UPGRADETO, Arrays.<Type>asList(new Address(160, implementation)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> implementation() {
        final Function function = new Function(FUNC_IMPLEMENTATION, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> claimProxyOwnership() {
        final Function function = new Function(FUNC_CLAIMPROXYOWNERSHIP, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferProxyOwnership(String newOwner) {
        final Function function = new Function(FUNC_TRANSFERPROXYOWNERSHIP, Arrays.<Type>asList(new Address(160, newOwner)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<ProxyOwnershipTransferredEventResponse> getProxyOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PROXYOWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<ProxyOwnershipTransferredEventResponse> responses = new ArrayList<ProxyOwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ProxyOwnershipTransferredEventResponse typedResponse = new ProxyOwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProxyOwnershipTransferredEventResponse> proxyOwnershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ProxyOwnershipTransferredEventResponse>() {
            @Override
            public ProxyOwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PROXYOWNERSHIPTRANSFERRED_EVENT, log);
                ProxyOwnershipTransferredEventResponse typedResponse = new ProxyOwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProxyOwnershipTransferredEventResponse> proxyOwnershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROXYOWNERSHIPTRANSFERRED_EVENT));
        return proxyOwnershipTransferredEventFlowable(filter);
    }

    public List<NewPendingOwnerEventResponse> getNewPendingOwnerEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPENDINGOWNER_EVENT, transactionReceipt);
        ArrayList<NewPendingOwnerEventResponse> responses = new ArrayList<NewPendingOwnerEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewPendingOwnerEventResponse typedResponse = new NewPendingOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.currentOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pendingOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewPendingOwnerEventResponse> newPendingOwnerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewPendingOwnerEventResponse>() {
            @Override
            public NewPendingOwnerEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPENDINGOWNER_EVENT, log);
                NewPendingOwnerEventResponse typedResponse = new NewPendingOwnerEventResponse();
                typedResponse.log = log;
                typedResponse.currentOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pendingOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewPendingOwnerEventResponse> newPendingOwnerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPENDINGOWNER_EVENT));
        return newPendingOwnerEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<BlacklistedEventResponse> getBlacklistedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BLACKLISTED_EVENT, transactionReceipt);
        ArrayList<BlacklistedEventResponse> responses = new ArrayList<BlacklistedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BlacklistedEventResponse typedResponse = new BlacklistedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.isBlacklisted = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BlacklistedEventResponse> blacklistedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BlacklistedEventResponse>() {
            @Override
            public BlacklistedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BLACKLISTED_EVENT, log);
                BlacklistedEventResponse typedResponse = new BlacklistedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.isBlacklisted = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BlacklistedEventResponse> blacklistedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BLACKLISTED_EVENT));
        return blacklistedEventFlowable(filter);
    }

    public List<BurnEventResponse> getBurnEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BURN_EVENT, transactionReceipt);
        ArrayList<BurnEventResponse> responses = new ArrayList<BurnEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BurnEventResponse typedResponse = new BurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.burner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BurnEventResponse> burnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BurnEventResponse>() {
            @Override
            public BurnEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BURN_EVENT, log);
                BurnEventResponse typedResponse = new BurnEventResponse();
                typedResponse.log = log;
                typedResponse.burner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BurnEventResponse> burnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BURN_EVENT));
        return burnEventFlowable(filter);
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINT_EVENT, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintEventResponse> mintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MintEventResponse>() {
            @Override
            public MintEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINT_EVENT, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintEventResponse> mintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINT_EVENT));
        return mintEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetBurnBoundsEventResponse> getSetBurnBoundsEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETBURNBOUNDS_EVENT, transactionReceipt);
        ArrayList<SetBurnBoundsEventResponse> responses = new ArrayList<SetBurnBoundsEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetBurnBoundsEventResponse typedResponse = new SetBurnBoundsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newMin = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newMax = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetBurnBoundsEventResponse> setBurnBoundsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetBurnBoundsEventResponse>() {
            @Override
            public SetBurnBoundsEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETBURNBOUNDS_EVENT, log);
                SetBurnBoundsEventResponse typedResponse = new SetBurnBoundsEventResponse();
                typedResponse.log = log;
                typedResponse.newMin = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newMax = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetBurnBoundsEventResponse> setBurnBoundsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETBURNBOUNDS_EVENT));
        return setBurnBoundsEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE, Arrays.<Type>asList(new Address(160, owner), new Address(160, spender)), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final Function function = new Function(FUNC_APPROVE, Arrays.<Type>asList(new Address(160, spender), new Uint256(amount)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF, Arrays.<Type>asList(new Address(160, account)), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger amount) {
        final Function function = new Function(FUNC_BURN, Arrays.<Type>asList(new Uint256(amount)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> burnMax() {
        final Function function = new Function(FUNC_BURNMAX, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> burnMin() {
        final Function function = new Function(FUNC_BURNMIN, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> canBurn(String param0) {
        final Function function = new Function(FUNC_CANBURN, Arrays.<Type>asList(new Address(160, param0)), Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
        }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> claimOwnership() {
        final Function function = new Function(FUNC_CLAIMOWNERSHIP, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseAllowance(String spender, BigInteger subtractedValue) {
        final Function function = new Function(FUNC_DECREASEALLOWANCE, Arrays.<Type>asList(new Address(160, spender), new Uint256(subtractedValue)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> delegateAllowance(String owner, String spender) {
        final Function function = new Function(FUNC_DELEGATEALLOWANCE, Arrays.<Type>asList(new Address(160, owner), new Address(160, spender)), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateApprove(String spender, BigInteger value, String origSender) {
        final Function function = new Function(FUNC_DELEGATEAPPROVE, Arrays.<Type>asList(new Address(160, spender), new Uint256(value), new Address(160, origSender)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> delegateBalanceOf(String who) {
        final Function function = new Function(FUNC_DELEGATEBALANCEOF, Arrays.<Type>asList(new Address(160, who)), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateDecreaseApproval(String spender, BigInteger subtractedValue, String origSender) {
        final Function function = new Function(FUNC_DELEGATEDECREASEAPPROVAL, Arrays.<Type>asList(new Address(160, spender), new Uint256(subtractedValue), new Address(160, origSender)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateIncreaseApproval(String spender, BigInteger addedValue, String origSender) {
        final Function function = new Function(FUNC_DELEGATEINCREASEAPPROVAL, Arrays.<Type>asList(new Address(160, spender), new Uint256(addedValue), new Address(160, origSender)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> delegateTotalSupply() {
        final Function function = new Function(FUNC_DELEGATETOTALSUPPLY, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateTransfer(String to, BigInteger value, String origSender) {
        final Function function = new Function(FUNC_DELEGATETRANSFER, Arrays.<Type>asList(new Address(160, to), new Uint256(value), new Address(160, origSender)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateTransferFrom(String from, String to, BigInteger value, String origSender) {
        final Function function = new Function(FUNC_DELEGATETRANSFERFROM, Arrays.<Type>asList(new Address(160, from), new Address(160, to), new Uint256(value), new Address(160, origSender)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAllowance(String spender, BigInteger addedValue) {
        final Function function = new Function(FUNC_INCREASEALLOWANCE, Arrays.<Type>asList(new Address(160, spender), new Uint256(addedValue)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String account, BigInteger amount) {
        final Function function = new Function(FUNC_MINT, Arrays.<Type>asList(new Address(160, account), new Uint256(amount)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
        }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> pendingOwner() {
        final Function function = new Function(FUNC_PENDINGOWNER, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
        }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reclaimEther(String _to) {
        final Function function = new Function(FUNC_RECLAIMETHER, Arrays.<Type>asList(new Address(160, _to)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reclaimToken(String token, String _to) {
        final Function function = new Function(FUNC_RECLAIMTOKEN, Arrays.<Type>asList(new Address(160, token), new Address(160, _to)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> rounding() {
        final Function function = new Function(FUNC_ROUNDING, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setBlacklisted(String account, Boolean _isBlacklisted) {
        final Function function = new Function(FUNC_SETBLACKLISTED, Arrays.<Type>asList(new Address(160, account), new Bool(_isBlacklisted)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBurnBounds(BigInteger _min, BigInteger _max) {
        final Function function = new Function(FUNC_SETBURNBOUNDS, Arrays.<Type>asList(new Uint256(_min), new Uint256(_max)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setCanBurn(String account, Boolean _canBurn) {
        final Function function = new Function(FUNC_SETCANBURN, Arrays.<Type>asList(new Address(160, account), new Bool(_canBurn)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
        }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, Arrays.<Type>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
        }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String recipient, BigInteger amount) {
        final Function function = new Function(FUNC_TRANSFER, Arrays.<Type>asList(new Address(160, recipient), new Uint256(amount)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String sender, String recipient, BigInteger amount) {
        final Function function = new Function(FUNC_TRANSFERFROM, Arrays.<Type>asList(new Address(160, sender), new Address(160, recipient), new Uint256(amount)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(FUNC_TRANSFEROWNERSHIP, Arrays.<Type>asList(new Address(160, newOwner)), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TUSD load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TUSD(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TUSD load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TUSD(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TUSD load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TUSD(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TUSD load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TUSD(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TUSD> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TUSD.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TUSD> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TUSD.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TUSD> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TUSD.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TUSD> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TUSD.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ProxyOwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class NewPendingOwnerEventResponse extends BaseEventResponse {
        public String currentOwner;

        public String pendingOwner;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class BlacklistedEventResponse extends BaseEventResponse {
        public String account;

        public Boolean isBlacklisted;
    }

    public static class BurnEventResponse extends BaseEventResponse {
        public String burner;

        public BigInteger value;
    }

    public static class MintEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger value;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SetBurnBoundsEventResponse extends BaseEventResponse {
        public BigInteger newMin;

        public BigInteger newMax;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }
}
